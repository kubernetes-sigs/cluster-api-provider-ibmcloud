/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by MockGen. DO NOT EDIT.
// Source: ./resourcemanager.go
//
// Generated by this command:
//
//	mockgen -source=./resourcemanager.go -destination=./mock/resourcemanager_generated.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	core "github.com/IBM/go-sdk-core/v5/core"
	resourcemanagerv2 "github.com/IBM/platform-services-go-sdk/resourcemanagerv2"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceManager is a mock of ResourceManager interface.
type MockResourceManager struct {
	ctrl     *gomock.Controller
	recorder *MockResourceManagerMockRecorder
}

// MockResourceManagerMockRecorder is the mock recorder for MockResourceManager.
type MockResourceManagerMockRecorder struct {
	mock *MockResourceManager
}

// NewMockResourceManager creates a new mock instance.
func NewMockResourceManager(ctrl *gomock.Controller) *MockResourceManager {
	mock := &MockResourceManager{ctrl: ctrl}
	mock.recorder = &MockResourceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceManager) EXPECT() *MockResourceManagerMockRecorder {
	return m.recorder
}

// GetResourceGroup mocks base method.
func (m *MockResourceManager) GetResourceGroup(arg0 *resourcemanagerv2.GetResourceGroupOptions) (*resourcemanagerv2.ResourceGroup, *core.DetailedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceGroup", arg0)
	ret0, _ := ret[0].(*resourcemanagerv2.ResourceGroup)
	ret1, _ := ret[1].(*core.DetailedResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetResourceGroup indicates an expected call of GetResourceGroup.
func (mr *MockResourceManagerMockRecorder) GetResourceGroup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceGroup", reflect.TypeOf((*MockResourceManager)(nil).GetResourceGroup), arg0)
}

// GetResourceGroupByName mocks base method.
func (m *MockResourceManager) GetResourceGroupByName(arg0 string) (*resourcemanagerv2.ResourceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceGroupByName", arg0)
	ret0, _ := ret[0].(*resourcemanagerv2.ResourceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceGroupByName indicates an expected call of GetResourceGroupByName.
func (mr *MockResourceManagerMockRecorder) GetResourceGroupByName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceGroupByName", reflect.TypeOf((*MockResourceManager)(nil).GetResourceGroupByName), arg0)
}

// ListResourceGroups mocks base method.
func (m *MockResourceManager) ListResourceGroups(arg0 *resourcemanagerv2.ListResourceGroupsOptions) (*resourcemanagerv2.ResourceGroupList, *core.DetailedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceGroups", arg0)
	ret0, _ := ret[0].(*resourcemanagerv2.ResourceGroupList)
	ret1, _ := ret[1].(*core.DetailedResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListResourceGroups indicates an expected call of ListResourceGroups.
func (mr *MockResourceManagerMockRecorder) ListResourceGroups(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceGroups", reflect.TypeOf((*MockResourceManager)(nil).ListResourceGroups), arg0)
}
