apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    ccm: external
    cluster.x-k8s.io/cluster-name: "${CLUSTER_NAME}"
  name: "${CLUSTER_NAME}"
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
        - ${POD_CIDR:="192.168.0.0/16"}
    serviceDomain: ${SERVICE_DOMAIN:="cluster.local"}
    services:
      cidrBlocks:
        - ${SERVICE_CIDR:="10.128.0.0/12"}
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
    kind: IBMPowerVSCluster
    name: "${CLUSTER_NAME}"
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: "${CLUSTER_NAME}-control-plane"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: IBMPowerVSCluster
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: "${CLUSTER_NAME}"
  name: "${CLUSTER_NAME}"
spec:
  serviceInstanceID: "${IBMPOWERVS_SERVICE_INSTANCE_ID}"
  network:
    name: "${IBMPOWERVS_NETWORK_NAME}"
  controlPlaneEndpoint:
    host: "${IBMPOWERVS_VIP_EXTERNAL}"
    port: 6443
---
kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  version: "${KUBERNETES_VERSION}"
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  machineTemplate:
    infrastructureRef:
      kind: IBMPowerVSMachineTemplate
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
      name: "${CLUSTER_NAME}-control-plane"
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        certSANs:
          - "${IBMPOWERVS_VIP}"
          - "${IBMPOWERVS_VIP_EXTERNAL}"
        extraArgs:
          cloud-provider: external
      controlPlaneEndpoint: ${IBMPOWERVS_VIP}:6443
      controllerManager:
        extraArgs:
          cloud-provider: external
          enable-hostpath-provisioner: "true"
    initConfiguration:
      nodeRegistration:
        criSocket: /var/run/containerd/containerd.sock
        kubeletExtraArgs:
          cloud-provider: external
          eviction-hard: nodefs.available<0%,nodefs.inodesFree<0%,imagefs.available<0%
        name: '{{ v1.local_hostname }}'
    joinConfiguration:
      discovery:
        bootstrapToken:
          apiServerEndpoint: ${IBMPOWERVS_VIP}:6443
          token: ""
          caCertHashes: [ ]
          unsafeSkipCAVerification: false
      nodeRegistration:
        criSocket: /var/run/containerd/containerd.sock
        kubeletExtraArgs:
          cloud-provider: external
          eviction-hard: nodefs.available<0%,nodefs.inodesFree<0%,imagefs.available<0%
        name: '{{ v1.local_hostname }}'
    useExperimentalRetryJoin: true
    preKubeadmCommands:
      - hostname "{{ v1.local_hostname }}"
      - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
      - echo "127.0.0.1   localhost" >>/etc/hosts
      - echo "127.0.0.1   {{ v1.local_hostname }}" >>/etc/hosts
      - echo "{{ v1.local_hostname }}" >/etc/hostname
    files:
      - path: /etc/kubernetes/manifests/kube-vip.yaml
        content: |
          apiVersion: v1
          kind: Pod
          metadata:
            creationTimestamp: null
            name: kube-vip
            namespace: kube-system
          spec:
            containers:
            - args:
              - manager
              env:
              - name: vip_arp
                value: "true"
              - name: port
                value: "6443"
              - name: vip_interface
                value: env2
              - name: vip_cidr
                value: "${IBMPOWERVS_VIP_CIDR}"
              - name: cp_enable
                value: "true"
              - name: cp_namespace
                value: kube-system
              - name: vip_ddns
                value: "false"
              - name: svc_enable
                value: "true"
              - name: vip_leaderelection
                value: "true"
              - name: vip_leaseduration
                value: "5"
              - name: vip_renewdeadline
                value: "3"
              - name: vip_retryperiod
                value: "1"
              - name: address
                value: "${IBMPOWERVS_VIP}"
              image: ghcr.io/kube-vip/kube-vip:v0.4.4
              imagePullPolicy: Always
              name: kube-vip
              resources: {}
              securityContext:
                capabilities:
                  add:
                  - NET_ADMIN
                  - NET_RAW
              volumeMounts:
              - mountPath: /etc/kubernetes/admin.conf
                name: kubeconfig
            hostAliases:
            - hostnames:
              - kubernetes
              ip: 127.0.0.1
            hostNetwork: true
            volumes:
            - hostPath:
                path: /etc/kubernetes/admin.conf
              name: kubeconfig
          status: {}
        owner: "root:root"
        permissions: "0744"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: IBMPowerVSMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  template:
    spec:
      serviceInstanceID: "${IBMPOWERVS_SERVICE_INSTANCE_ID}"
      sshKey: "${IBMPOWERVS_SSHKEY_NAME}"
      image:
        name: "${IBMPOWERVS_IMAGE_NAME}"
      network:
        name: "${IBMPOWERVS_NETWORK_NAME}"
      memoryGiB: ${IBMPOWERVS_CONTROL_PLANE_MEMORY:=4}
      processors: ${IBMPOWERVS_CONTROL_PLANE_PROCESSORS:="0.25"}
      systemType: ${IBMPOWERVS_CONTROL_PLANE_SYSTYPE:="s922"}
      processorType: ${IBMPOWERVS_CONTROL_PLANE_PROCTYPE:="Shared"}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: "${CLUSTER_NAME}-md-0"
spec:
  clusterName: "${CLUSTER_NAME}"
  replicas: ${WORKER_MACHINE_COUNT}
  selector:
    matchLabels:
  template:
    spec:
      clusterName: "${CLUSTER_NAME}"
      version: "${KUBERNETES_VERSION}"
      bootstrap:
        configRef:
          name: "${CLUSTER_NAME}-md-0"
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
      infrastructureRef:
        name: "${CLUSTER_NAME}-md-0"
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
        kind: IBMPowerVSMachineTemplate
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: IBMPowerVSMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-md-0"
spec:
  template:
    spec:
      serviceInstanceID: "${IBMPOWERVS_SERVICE_INSTANCE_ID}"
      sshKey: "${IBMPOWERVS_SSHKEY_NAME}"
      image:
        name: "${IBMPOWERVS_IMAGE_NAME}"
      network:
        name: "${IBMPOWERVS_NETWORK_NAME}"
      memoryGiB: ${IBMPOWERVS_CONTROL_PLANE_MEMORY:=4}
      processors: ${IBMPOWERVS_CONTROL_PLANE_PROCESSORS:="0.25"}
      systemType: ${IBMPOWERVS_CONTROL_PLANE_SYSTYPE:="s922"}
      processorType: ${IBMPOWERVS_CONTROL_PLANE_PROCTYPE:="Shared"}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
    cluster.x-k8s.io/control-plane: ""
  name: "${CLUSTER_NAME}-md-0"
spec:
  template:
    spec:
      joinConfiguration:
        discovery:
          bootstrapToken:
            apiServerEndpoint: ${IBMPOWERVS_VIP}:6443
            token: ""
            caCertHashes: []
            unsafeSkipCAVerification: false
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          kubeletExtraArgs:
            cloud-provider: external
            eviction-hard: nodefs.available<0%,nodefs.inodesFree<0%,imagefs.available<0%
          name: '{{ v1.local_hostname }}'
      preKubeadmCommands:
        - hostname "{{ v1.local_hostname }}"
        - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
        - echo "127.0.0.1   localhost" >>/etc/hosts
        - echo "127.0.0.1   {{ v1.local_hostname }}" >>/etc/hosts
        - echo "{{ v1.local_hostname }}" >/etc/hostname
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: crs-cloud-conf
spec:
  clusterSelector:
    matchLabels:
      ccm: external
  resources:
    - kind: Secret
      name: ibmpowervs-credential
    - kind: ConfigMap
      name: ibmpowervs-cfg
    - kind: ConfigMap
      name: cloud-controller-manager-addon
  strategy: ApplyOnce
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ibmpowervs-cfg
data:
  ibmpowervs-cloud-conf.yaml: |-
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: ibmpowervs-cloud-config
      namespace: kube-system
    data:
      ibmpowervs.conf: |
        [global]
        version = 1.1.0
        [kubernetes]
        config-file = ""
        [provider]
        cluster-default-provider = g2
        accountID = ${IBMACCOUNT_ID}
        clusterID = ${CLUSTER_NAME}
        g2workerServiceAccountID = ${IBMACCOUNT_ID}
        g2Credentials = /etc/ibm-secret/ibmcloud_api_key
        g2ResourceGroupName = ${IBMVPC_RESOURCE_GROUP:=""}
        g2VpcSubnetNames = ${IBMVPC_SUBNET_NAMES:=""}
        g2VpcName = ${IBMVPC_NAME:=""}
        region =  ${IBMVPC_REGION:=""}
        powerVSCloudInstanceID = ${IBMPOWERVS_SERVICE_INSTANCE_ID}
        powerVSRegion = ${IBMPOWERVS_REGION}
        powerVSZone = ${IBMPOWERVS_ZONE}
---
apiVersion: v1
kind: Secret
metadata:
  name: ibmpowervs-credential
type: addons.cluster.x-k8s.io/resource-set
stringData:
  ibmpowervs-credential.yaml: |-
    apiVersion: v1
    kind: Secret
    metadata:
      name: ibmpowervs-cloud-credential
      namespace: kube-system
    data:
      ibmcloud_api_key: ${BASE64_API_KEY}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloud-controller-manager-addon
data:
  ibmpowervs-ccm-external.yaml: |-
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: cloud-controller-manager
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: cloud-controller-manager:apiserver-authentication-reader
      namespace: kube-system
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: extension-apiserver-authentication-reader
    subjects:
      - apiGroup: ""
        kind: ServiceAccount
        name: cloud-controller-manager
        namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: system:cloud-controller-manager
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: system:cloud-controller-manager
    subjects:
      - kind: ServiceAccount
        name: cloud-controller-manager
        namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: system:cloud-controller-manager
    rules:
      - apiGroups:
          - ""
        resources:
          - events
        verbs:
          - create
          - patch
          - update
      - apiGroups:
          - ""
        resources:
          - nodes
        verbs:
          - "*"
      - apiGroups:
          - ""
        resources:
          - nodes/status
        verbs:
          - patch
      - apiGroups:
          - ""
        resources:
          - services
        verbs:
          - list
          - patch
          - update
          - watch
      - apiGroups:
          - ""
        resources:
          - services/status
        verbs:
          - patch
      - apiGroups:
          - ""
        resources:
          - serviceaccounts
        verbs:
          - create
          - get
          - list
          - watch
          - update
      - apiGroups:
          - ""
        resources:
          - persistentvolumes
        verbs:
          - get
          - list
          - update
          - watch
      - apiGroups:
          - ""
        resources:
          - endpoints
        verbs:
          - create
          - get
          - list
          - watch
          - update
      - apiGroups:
          - ""
        resources:
          - secrets
        verbs:
          - get
          - list
          - watch
      - apiGroups:
          - "coordination.k8s.io"
        resources:
          - leases
        verbs:
          - create
          - get
          - list
          - watch
          - update
      - apiGroups:
          - ""
        resourceNames:
          - node-controller
          - service-controller
        resources:
          - serviceaccounts/token
        verbs:
          - create
    ---
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      name: ibmpowervs-cloud-controller-manager
      namespace: kube-system
      labels:
        k8s-app: ibmpowervs-cloud-controller-manager
    spec:
      selector:
        matchLabels:
          k8s-app: ibmpowervs-cloud-controller-manager
      updateStrategy:
        type: RollingUpdate
      template:
        metadata:
          labels:
            k8s-app: ibmpowervs-cloud-controller-manager
        spec:
          nodeSelector:
            node-role.kubernetes.io/control-plane: ""
          tolerations:
            - key: node.cloudprovider.kubernetes.io/uninitialized
              value: "true"
              effect: NoSchedule
            - key: node-role.kubernetes.io/master
              effect: NoSchedule
              operator: Exists
            - key: node-role.kubernetes.io/control-plane
              effect: NoSchedule
              operator: Exists
            - key: node.kubernetes.io/not-ready
              effect: NoSchedule
              operator: Exists
          serviceAccountName: cloud-controller-manager
          containers:
            - name: ibmpowervs-cloud-controller-manager
              image: gcr.io/k8s-staging-capi-ibmcloud/powervs-cloud-controller-manager:07d19bf
              args:
                - --v=2
                - --cloud-provider=ibm
                - --cloud-config=/etc/cloud/ibmpowervs.conf
                - --use-service-account-credentials=true
              env:
                - name: ENABLE_VPC_PUBLIC_ENDPOINT
                  value: "true"
              volumeMounts:
                - mountPath: /etc/cloud
                  name: ibmpowervs-config-volume
                  readOnly: true
                - mountPath: /etc/ibm-secret
                  name: ibm-secret
              resources:
                requests:
                  cpu: 200m
          hostNetwork: true
          volumes:
            - name: ibmpowervs-config-volume
              configMap:
                name: ibmpowervs-cloud-config
            - name: ibm-secret
              secret:
                secretName: ibmpowervs-cloud-credential
