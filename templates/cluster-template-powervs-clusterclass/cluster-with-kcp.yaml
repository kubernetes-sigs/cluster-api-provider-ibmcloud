apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    ccm: external
    cluster.x-k8s.io/cluster-name: "${CLUSTER_NAME}"
  name: "${CLUSTER_NAME}"
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
        - ${POD_CIDR:="192.168.0.0/16"}
    serviceDomain: ${SERVICE_DOMAIN:="cluster.local"}
    services:
      cidrBlocks:
        - ${SERVICE_CIDR:="10.128.0.0/12"}
  topology:
    class: "${IBMPOWERVS_CLUSTER_CLASS_NAME}"
    controlPlane:
      replicas: ${CONTROL_PLANE_MACHINE_COUNT}
    version: ${KUBERNETES_VERSION}
    workers:
      machineDeployments:
        - class: default-worker
          name: md-0
          replicas: 2
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: ClusterClass
metadata:
  name: ${IBMPOWERVS_CLUSTER_CLASS_NAME:="powervs-cc"}
spec:
  controlPlane:
    machineInfrastructure:
      ref:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
        kind: IBMPowerVSMachineTemplate
        name: "${IBMPOWERVS_CLUSTER_CLASS_NAME}-control-plane-machinetemplate"
    ref:
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: KubeadmControlPlaneTemplate
      name: "${IBMPOWERVS_CLUSTER_CLASS_NAME}-control-plane"
  infrastructure:
    ref:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
      kind: IBMPowerVSClusterTemplate
      name: "${IBMPOWERVS_CLUSTER_CLASS_NAME}-cluster-template"
  workers:
    machineDeployments:
      - class: default-worker
        template:
          bootstrap:
            ref:
              apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
              kind: KubeadmConfigTemplate
              name:  "${IBMPOWERVS_CLUSTER_CLASS_NAME}-md-0"
          infrastructure:
            ref:
              apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
              kind: IBMPowerVSMachineTemplate
              name:  "${IBMPOWERVS_CLUSTER_CLASS_NAME}-worker-machinetemplate"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: IBMPowerVSClusterTemplate
metadata:
  name: "${IBMPOWERVS_CLUSTER_CLASS_NAME}-cluster-template"
spec:
  template:
    spec:
      controlPlaneEndpoint:
        host: "${IBMPOWERVS_VIP_EXTERNAL}"
        port: ${API_SERVER_PORT:=6443}
      network:
        name: "${IBMPOWERVS_NETWORK_NAME}"
      serviceInstanceID: "${IBMPOWERVS_SERVICE_INSTANCE_ID}"
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlaneTemplate
metadata:
  name: "${IBMPOWERVS_CLUSTER_CLASS_NAME}-control-plane"
spec:
  template:
    spec:
      kubeadmConfigSpec:
        clusterConfiguration:
          apiServer:
            certSANs:
              - "${IBMPOWERVS_VIP}"
              - "${IBMPOWERVS_VIP_EXTERNAL}"
            extraArgs:
              cloud-provider: external
          controlPlaneEndpoint: ${IBMPOWERVS_VIP}:${API_SERVER_PORT:=6443}
          controllerManager:
            extraArgs:
              cloud-provider: external
              enable-hostpath-provisioner: "true"
        files:
          - content: |
              apiVersion: v1
              kind: Pod
              metadata:
                creationTimestamp: null
                name: kube-vip
                namespace: kube-system
              spec:
                containers:
                - args:
                  - manager
                  env:
                  - name: vip_arp
                    value: "true"
                  - name: port
                    value: "${API_SERVER_PORT:=6443}"
                  - name: vip_interface
                    value: env2
                  - name: vip_cidr
                    value: "${IBMPOWERVS_VIP_CIDR}"
                  - name: cp_enable
                    value: "true"
                  - name: cp_namespace
                    value: kube-system
                  - name: vip_ddns
                    value: "false"
                  - name: svc_enable
                    value: "true"
                  - name: vip_leaderelection
                    value: "true"
                  - name: vip_leaseduration
                    value: "5"
                  - name: vip_renewdeadline
                    value: "3"
                  - name: vip_retryperiod
                    value: "1"
                  - name: address
                    value: "${IBMPOWERVS_VIP}"
                  image: ghcr.io/kube-vip/kube-vip:v0.8.0
                  imagePullPolicy: Always
                  name: kube-vip
                  resources: {}
                  securityContext:
                    capabilities:
                      add:
                      - NET_ADMIN
                      - NET_RAW
                  volumeMounts:
                  - mountPath: /etc/kubernetes/admin.conf
                    name: kubeconfig
                  - mountPath: /etc/hosts
                    name: etchosts
                hostNetwork: true
                volumes:
                - hostPath:
                    path: /etc/kubernetes/admin.conf
                  name: kubeconfig
                - hostPath:
                    path: /etc/kube-vip.hosts
                    type: File
                  name: etchosts
              status: {}
            owner: root:root
            path: /etc/kubernetes/manifests/kube-vip.yaml
            permissions: "0744"
          - content: 127.0.0.1 localhost kubernetes
            owner: root:root
            path: /etc/kube-vip.hosts
            permissions: "0644"
          - content: |
              #!/bin/bash
      
              # Copyright 2020 The Kubernetes Authors.
              #
              # Licensed under the Apache License, Version 2.0 (the "License");
              # you may not use this file except in compliance with the License.
              # You may obtain a copy of the License at
              #
              #     http://www.apache.org/licenses/LICENSE-2.0
              #
              # Unless required by applicable law or agreed to in writing, software
              # distributed under the License is distributed on an "AS IS" BASIS,
              # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
              # See the License for the specific language governing permissions and
              # limitations under the License.
      
              set -e
      
              # Configure the workaround required for kubeadm init with kube-vip:
              # xref: https://github.com/kube-vip/kube-vip/issues/684
      
              # Nothing to do for kubernetes < v1.29
              KUBEADM_MINOR="$(kubeadm version -o short | cut -d '.' -f 2)"
              if [[ "$KUBEADM_MINOR" -lt "29" ]]; then
                exit 0
              fi
      
              IS_KUBEADM_INIT="false"
      
              # cloud-init kubeadm init
              if [[ -f /run/kubeadm/kubeadm.yaml ]]; then
                IS_KUBEADM_INIT="true"
              fi
      
              # ignition kubeadm init
              if [[ -f /etc/kubeadm.sh ]] && grep -q -e "kubeadm init" /etc/kubeadm.sh; then
                IS_KUBEADM_INIT="true"
              fi
      
              if [[ "$IS_KUBEADM_INIT" == "true" ]]; then
                sed -i 's#path: /etc/kubernetes/admin.conf#path: /etc/kubernetes/super-admin.conf#' \
                  /etc/kubernetes/manifests/kube-vip.yaml
              fi
            owner: root:root
            path: /etc/pre-kubeadm-commands/50-kube-vip-prepare.sh
            permissions: "0700"
        initConfiguration:
          nodeRegistration:
            criSocket: unix:///var/run/containerd/containerd.sock
            kubeletExtraArgs:
              cloud-provider: external
              eviction-hard: nodefs.available<0%,nodefs.inodesFree<0%,imagefs.available<0%
            name: '{{ v1.local_hostname }}'
        joinConfiguration:
          discovery:
            bootstrapToken:
              apiServerEndpoint: 192.168.167.85:${API_SERVER_PORT:=6443}
              caCertHashes: []
              token: ""
              unsafeSkipCAVerification: false
          nodeRegistration:
            criSocket: unix:///var/run/containerd/containerd.sock
            kubeletExtraArgs:
              cloud-provider: external
              eviction-hard: nodefs.available<0%,nodefs.inodesFree<0%,imagefs.available<0%
            name: '{{ v1.local_hostname }}'
        preKubeadmCommands:
          - hostname "{{ v1.local_hostname }}"
          - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
          - echo "127.0.0.1   localhost" >>/etc/hosts
          - echo "127.0.0.1   {{ v1.local_hostname }}" >>/etc/hosts
          - echo "{{ v1.local_hostname }}" >/etc/hostname
          - for script in $(find /etc/pre-kubeadm-commands/ -name '*.sh' -type f | sort);
            do echo "Running script $script"; "$script"; done
        useExperimentalRetryJoin: true
